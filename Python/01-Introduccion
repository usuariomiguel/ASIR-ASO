                             Python
______________________________________________________________________________________                        

    Lenguaje de programacion interpretado, de alto nivel, 
    multiplataforma, de tipado dinamico y multiparadigma

    --Interpretado    --> no necesita un programa compilador
    --De alto nivel   --> su sintaxis se aproxima al lenguaje humano
    --Multiplataforma --> puede ser ejecutado en diferentes SO
    --Tipado dinamico --> no necesitamos indicar de que tipo son los datos en variables
    --Multiparadigma  --> tiene diferentes tecnicas de programacion 

    Pep 8 --> normas que revisa que el programa este bien estructurado

Variables
__________

    nombre = variable

    Pep 8: antes y despues del signo igual DEBE haber uno (y solo uno) espacio en blanco
        nombre = 'pepe'

    Pep 8: el nombre de las constantes DEBE ir en mayuscula
        PI = 3.1416

    Tipos de datos:
            Cadenas (string)
                nombre = 'pepe'
                multi = '''esto es una Cadena 
                            multilinea'''
            Enteros
                edad = 18
            Decimales
                precio = 2.97
            Booleanos
                ok = True
                ok = False

    Listas,Tuplas,Diccionarios

Operadores
__________

    Aritmeticos: + - * /
                ** Potencia
                // Cociente de la division entera
                % Resto de la division entera

                Notacion compacta
                    a = a + b --> a +=b

    Relacionales: == != < > <= >=

    Logicos:    and ->  True cuando las condiciones son true
                        Falsa cuando hay una condicion falsa
                or  ->  Falsa solo cuando las dos son falsas
                        True cuando no hay dos condiciones falsas
                xor ->  Falsa cuando las dos condiciones son iguales
                        True cuando una de las es true y otra falsa

Comentarios
__________

    Pep 8: comentarios en la misma linea que el codigo, DEBE separarse con DOS espacios en blanco.
    Pep 8: Despues de el simbolo # DEBE ir un solo espacio en blanco

    # Comentarios de una linea

    """Comentarios 
    multilinea"""

Función print ()
________________

    Saca VARIABLES por pantalla oo muestra MENSAJES

    print("mensaje",variable,sep="-",end="--")

    sep --> indica caracter por el cual se van a separar 
    end --> como va a terminar la expr que estoy explicando

    nombre = pepe
    print("hola",nombre,sep="$",end="fin")
hola$pepefin

Funcion input()
_______________

    Nos permite realizar entradas de datos por teclado

    python2 --> input()     - numeros 
                raw_input() - cadenas

    num = input("Dime un numero")

    python3 --> input()     - cadenas

    Para hacer transformaciones de tipo, usaremos las funciones de casting:
    int(), float(), str()

    --Ejemplo donde quiero introducir numeros ¡en variables con input--

        --Forma Correcto--

        num = int(input("Dime un numero: "))
        >>> numero2 = int(input("DIme numero: "))
        DIme numero: 56
        >>> numero3 = int(input("DIme numero: "))
        DIme numero: 45
        >>> numero2 * numero3
        2520

        --Forma incorrecto--

        >>> numero1 = input("dime numero")
        dime numero3
        >>> numero2 = input("dime numero2")
        dime numero256
        >>> numero1 + numero2
        '356'
        >>> numero1 * numero2
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        TypeError: can't multiply sequence by non-int of type 'str'

TUPLAS
______

    Pep 8: tiene que ir entre parenteris

    Son variables que permite almacenar varios datos inmutables de diferentes tipos.
    Una vez que se ha creado no me puede modificar o borrar, mientras esta en ejecucion

    tupla = ('hola',12,3.4,True,'Caracola')

LISTAS
______

    Pep 8: tiene que ir entre corchetes

    Permite almacenar varios datos de diferentes tipos.

    lista = ['hola',12,4.5,True,'caracola']

    Añadir elementos:
    ----------------

    lista.append ("nuevo_elemento")
    lista.insert (posición,"nuevo_elemento")

    lista = ['hola',12,3.4,True,'Caracola']

        #agregar

        lista[0] = "hola pepe"
        print (lista[2])
        lista.append("655453425")#agrega automaticamente elemento en la lista
        lista = lista + [89]
        lista.insert(1,"cadena")
        print(lista)

    Eliminar elementos:
    -------------------

    lista.pop(posicion)
    lista.remove('elemento')

    lista = ['hola',12,3.4,True,'Caracola']

        #eliminar

        lista.pop(0)#elimina elemento en la posicion 0
        print(lista)
        lista.remove('caracola')#eliminar elemento caracola
        print(lista)
        print.pop()#elimina elemnto en la ultima posicion por defecto

    Ordenar elementos:
    -----------------

    lista.sort()    #ordena de la 'a' a la 'z'
    lista.sort(reverse=True)    #ordena de la 'z' a la 'a'
    lista.reverse() #reverso actual de los elementos de la lista
    lista.count("elemento")   #cuenta cuantas veces aparece el elemento en la lista
    lista.index("elemento",posicion_inicio,posicion_fin)    #devuelve el posicion que ocupa un elemento

    Funciones de listas y tuplas
    ----------------------------

    funcion(argumentos)

    nombre_para_lista=list(tupla) -> conversion de tupla a lista
    nombre_para_tupla=list(tuple) -> conversion de lista a tupla
    max(tupla | lista) -> devuelve el maximo valor
    min(tupla | lista) -> devuelve el minimo valor
    len(tupla | lista) -> devuelve el numero de elementos

    Concatenar y copiar listas y tuplas
    -----------------------------------

    Concatenar  ->  lista1 = lista1 + lista2
                    lista3 = lista1 + lista2
                    lista  = lista  + [elemento]

    Copiar  

    -Por referencia  -> se copia en los elementos en las dos listas

        lista2 = lista1
        #ejemplo
        lista1=[1,2,3,4]

        lista2 = lista1[:]
        print(lista1,lista2)
        lista2.remove(1)
        print(lista1,lista2)

        Trabajando con LISTAS
        _____________________
        [1, 2, 3, 4] [1, 2, 3, 4]
        [2, 3, 4] [2, 3, 4]

    -Por valor -> se copia elementos en las dos listas pero si se modifica una no se modifican ambas

        lista2 = lista1[:]

        #ejemplo
        lista1=[1,2,3,4] 

        lista2 = lista1[:]
        print(lista1,lista2)
        lista2.remove(1)
        print(lista1,lista2)

        Trabajando con LISTAS
        _____________________
        [1, 2, 3, 4] [1, 2, 3, 4]
        [1, 2, 3, 4] [2, 3, 4]

DICIONARIOS
___________

    diccionario = {'clave1':valor1,'clave2':valor2,...}
    diccionario[clave1]

    Metodos de diccionarios
    -----------------------

    diccionario.items()     -> devuelve items

        for clave,valor in capitales.items():
        print ("La capital de",clave,"es",valor)

        La capital de Espanna es Madrid
        La capital de Italia es Roma
        La capital de Francia es Paris

    diccionario.keys()      -> devuelve las claves

        paises = capitales.keys()
        print(paises)
        dict_keys(['Espanna', 'Italia', 'Francia', 'Polonia', 'Australia', 'Egipto', 'Lituania', 'Portugal', 'Peru', 'Venezuela'])

    diccionario.values()    -> devuelve valores

        capi = capitales.values()
        print(capi)       
        dict_values(['Madrid', 'Roma', 'Paris', 'Varsovia', 'Viena', 'El Cairo', 'Vilna', 'Lisboa', 'Lima', 'Caracas'])

    diccionario.clear() ->  vacia el diccionario
    diccionario['clave']=valor   ->  
    diccionario.has_key(valor)  -> devuelve T or F si la clave existe en el diccionario
    